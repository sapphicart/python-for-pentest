import sys
import socket
import threading

HEX_FILTER = ''.join(
    [(len(repr(chr(i))) == 3) and chr(i) or '.' for i in range (256)])
# HEX_FILTER string will print the ASCII characters if possible or a (.) if the characters are not printable

def hexdump(src, length=16, show=True):
    if isinstance(src, bytes): # hexdump function takes some input as bytes or a string
        src = src.decode() # decode the bytes if a string is passed

    results = list() 
    for i in range(0, len(src), length):
        word = str(src[i:i+length]) # take a piece of the string and dump it into the word variable

        printable = word.translate(HEX_FILTER) # take the built in translate function and translate printable characters according to HEX_FILTER rule
        hexa = ''.join([f'{ord(c):02X}' for c in word]) # substitute the hex representation of every character in a raw string hexa
        hexwidth = length*3
        results.append(f'{i:04x} {hexa:<{hexwidth}} {printable}') # new array to hold all the strings, result and the hex value with the printable representation
    if show:
        for line in results:
            print(line)
    else:
        return results
    
def receive_from(connection):
    buffer = b"" # the string will be byte string
    connection.settimeout(5) # byte string buffer that will accumulate response from the socket increase timeout if necessary
    try:
        while True:
            data = connection.recv(4096)
            if not data:
                break
            buffer += data # read response data into buffer until there's no more
    except Exception as e:
        pass
    return buffer

def request_handler(buffer):
    return buffer

def response_handler(buffer):
    return buffer

def proxy_handler(client_socket, remote_host, remote_port, receive_first):
    remote_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    remote_socket.connect((remote_host, remote_port)) # connect to the remote host

    if receive_first: # make sure we don't need to first initiate connection to the remote side
        remote_buffer = receive_from(remote_socket)
        hexdump(remote_buffer)

    remote_buffer = response_handler(remote_buffer)
    if len(remote_buffer):
        print(["[<===] Sending %d bytes to localhost." % len(remote_buffer)])
        client_socket.send(remote_buffer)

    while True: # start the loop
        local_buffer = receive_from(client_socket)
        if len(local_buffer):
            line = "[==>] Received %d bytes from localhost." % len(local_buffer)
            print(line)
            hexdump(local_buffer)

            local_buffer = request_handler(local_buffer)
            remote_socket.send(local_buffer)
            print("[==>] Sent to remote.")

        remote_buffer = receive_from(remote_socket)
        if len(remote_buffer):
            print("[<==] Received %d bytes from remote." % len(remote_buffer))
            hexdump(remote_buffer)

            remote_buffer = response_handler(remote_buffer)
            client_socket.send(remote_buffer)
            print("[<==] Send to localhost.")

        if not len(local_buffer) or not len(remote_buffer):
            client_socket.close()
            remote_socket.close()
            print("[*] NO more data. closing connections.")
            break

def server_loop(local_host, local_port,
                remote_host, remote_port, receive_first):
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        server.bind((local_host, local_port)) # bind to the ip and port
    except Exception as e:
        print('problem on bind: %r' % e)

        print("[!!] Failed to listen on %s:%d" % (local_host, local_port))
        print("[!!] Check for other listening sockets or correct permissions.")
        sys.exit(0)

    print("[*] Listening on %s:%d" % (local_host, local_port))
    server.listen(5) # start listening
    while True:
        client_socket, addr = server.accept() # accept the connection
        line = "> Received incoming connection from %s:%d" % (addr[0], addr[1])
        print(line)
        proxy_thread = threading.Thread(
            target=proxy_handler,
            args=(client_socket, remote_host,
                  remote_port, receive_first))
        proxy_thread.start() # start threading for incoming data

def main():
    if len(sys.argv[1:]) != 5: # if usage is not correct print help
        print("Usage: ./proxy.py [localhost] [localport]", end='')
        print("[remotehost] [remoteport] [receive_first]")
        print("Example: ./[roxy.py 127.0.0.1 5555 10.12.131.1 5555 True]")
        sys.exit()
    local_host = sys.argv[1] # assign arguments for local_host, port etc
    local_port = int(sys.argv[2])
    remote_host = sys.argv[3]
    remote_port = sys.argv[4]

    receive_first = sys.argv[5]
    
    if "True" in receive_first: # if receive_first is True string assign True
        receive_first = True
    else:
        receive_first = False

    server_loop(local_host, local_port,
                remote_host, remote_port, receive_first) # run the server loop function with arguments from main
    
    if __name__ == '__main__':
        main()