import os
import paramiko
import socket
import sys
import threading

CWD = os.path.dirname(os.path.realpath(__file__))
HOSTKEY = paramiko.RSAKey(filename=os.path.join(CWD, 'test_rsa.key'))

class Server (paramiko.ServerInterface): # create a server class
    def __init__(self):
        self.event = threading.Event()

    def check_channelnel_request(self, kind, channelid): # if a session is opened return succeeded if not return failed
        if kind == "session":
            return paramiko.OPEN_SUCCEEDED
        return paramiko.OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED

        
    def check_auth_password(self, username, password): # if username and password matches return authorisation successful
        if (username == 'tim') and (password == 'sekret'):
            return paramiko.AUTH_SUCCESSFUL
        return paramiko.AUTH_FAILED
            

def main():
        server = input('Enter the server IP: ')
        ssh_port = 2222

        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            sock.bind((server, ssh_port))
            sock.listen(100)
            print('[*] Listening for connection...')
            client, addr = sock.accept()
        except Exception as e:
            print('[-] Listen failed: ' + str(e))
            sys.exit(1)
        else:
            print('[+] Got a connection!', client, addr)

        # create new channel
        newSession = paramiko.Transport(client)
        newSession.add_server_key(HOSTKEY)
        server = Server()
        newSession.start_server(server=server)

        channel = newSession.accept(20)
        if channel is None:
            print('*** No channel.')
            sys.exit(1)

        print('[+] Authenticated!')
        print(channel.recv(1024))
        b = bytes(str('Welcome to bh_ssh'), encoding='utf-8')
        channel.send(b)
        try:
            while True:
                command = input("Enter command: ")
                if command != 'exit':
                    channel.send(bytes(command, encoding='utf-8'))
                    r = channel.recv(8192)
                    print(r.decode())
                else:
                    channel.send(bytes('exit', encoding='utf-8'))
                    print('exiting')
                    newSession.close()
                    break
        except KeyboardInterrupt:
            newSession.close()

if __name__ == '__main__':
    main()